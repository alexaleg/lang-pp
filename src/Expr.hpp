/*
 * This file was automatically generated by gen_parse.py
 * on 2024-02-24 14:22:16
 * from Expr.txt
 *  Binary   : Expr* left, Token op, Expr* right
 *  Literal  : any value
 */
#pragma once

#include <any>
#include <memory>
#include <utility>  // std::move
#include "token.hpp"

struct Binary;
struct Literal;

struct ExprVisitor {
  virtual std::any visitBinaryExpr(std::shared_ptr<Binary> expr) = 0;
  virtual std::any visitLiteralExpr(std::shared_ptr<Literal> expr) = 0;
  virtual ~ExprVisitor() = default;
};

struct Expr {
  virtual std::any accept(ExprVisitor& visitor) = 0;
};

struct Binary: Expr, public std::enable_shared_from_this<Binary>  {
  Binary(std::shared_ptr<Expr> left, Token op, std::shared_ptr<Expr> right)
    : left{std::move(left)}, op{std::move(op)}, right{std::move(right)}
  {}

  std::any accept(ExprVisitor& visitor) override {
    return visitor.visitBinaryExpr(shared_from_this());
  }

 const std::shared_ptr<Expr> left;
 const Token op;
 const std::shared_ptr<Expr> right;
};

struct Literal: Expr, public std::enable_shared_from_this<Literal>  {
  Literal(std::any value)
    : value{std::move(value)}
  {}

  std::any accept(ExprVisitor& visitor) override {
    return visitor.visitLiteralExpr(shared_from_this());
  }

 const std::any value;
};
